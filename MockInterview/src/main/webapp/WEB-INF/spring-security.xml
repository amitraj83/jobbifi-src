<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"	
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.1.xsd">


	<http auto-config="true" use-expressions="true">
		
		<custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencyFilter" />		
		<session-management session-authentication-strategy-ref="sas"/>
			
		<!-- Need to security -->		
		<intercept-url pattern="/resources/**" access="permitAll"/>				
		<intercept-url pattern="/" access="permitAll"/>		
		
		<!-- map this to servlet instead of the jsp page -->		
		<intercept-url pattern="/index.jsp" access="permitAll"/>			
		<intercept-url pattern="/login.do" access="permitAll"/>
		<intercept-url pattern="/loginfailed.do" access="permitAll"/>
		
		<intercept-url pattern="/admin/**" access="hasAnyRole('ROLE_ADMIN')" />				
			
		<!-- 
		
			Enable this later to restrict all the resources once all the code transfer to 
			new structure, which will restrict the all request except public pages 
			  	
			<intercept-url pattern="/**" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')"  />
			
			 In that case allow the static pages as
			 <intercept-url pattern="/mocks*" access="permitAll"/>
			 <intercept-url pattern="/jobs*" access="permitAll"/>
			 <intercept-url pattern="/employers*" access="permitAll"/>
			 
			 In general we can add all the pages under following to access publicly
			 <intercept-url pattern="/public/**" access="permitAll"/>
			 
			 then create url as /public/mocks/.. for the ajax
			 
		 -->
		 
		<!-- 	
			<intercept-url pattern="/aauth/**" access="ROLE_USER" /> 
			<intercept-url pattern="/chat/**" access="ROLE_USER" />
			<intercept-url pattern="/files/**" access="ROLE_USER" />
			<intercept-url pattern="/register.do" /> 
			<intercept-url pattern="/welcome.do" access="ROLE_USER"/>
		 -->
		 
		<form-login login-page="/"					
					default-target-url="/loginsuccess.do"
					authentication-failure-url="/loginfailed.do" 
					always-use-default-target="true" 					
				/>
		<logout logout-success-url="/logout.do" />		
	</http>

	<!-- Security Filter -->
	<beans:bean id="concurrencyFilter"
	   class="org.springframework.security.web.session.ConcurrentSessionFilter">
	  <beans:property name="sessionRegistry" ref="sessionRegistry" />
	  <beans:property name="expiredUrl" value="/logout.do" />
	</beans:bean>
	
	<beans:bean id="myAuthFilter" 
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
	  <beans:property name="sessionAuthenticationStrategy" ref="sas" />
	  <beans:property name="authenticationManager" ref="authenticationManager" />
	</beans:bean>
	
	<beans:bean id="sas" 
		class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
	  <beans:constructor-arg name="sessionRegistry" ref="sessionRegistry" />
	  <beans:property name="maximumSessions" value="1" />
	</beans:bean>
	
	<beans:bean id="sessionRegistry"
	    class="org.springframework.security.core.session.SessionRegistryImpl" />
	
 	<beans:bean id="customAuthenticationProvider" class="com.interview.security.CustomizedAuthenticationProvider"/>  
 	
 	<!-- Password Encoder -->
 	<beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"/>
  
    <!-- Authentication Manager -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="customAuthenticationProvider">
			<password-encoder hash="sha"/>
		</authentication-provider> 
	</authentication-manager>

</beans:beans>